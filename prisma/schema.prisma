generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  urls          Url[]
  createdAt     DateTime  @default(now())
}

model Url {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  slug      String   @unique
  original  String
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  clicks    Click[]
  createdAt DateTime @default(now())
}

model Click {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  urlId     String   @db.ObjectId
  url       Url      @relation(fields: [urlId], references: [id])
  timestamp DateTime @default(now())
  ip        String?
  userAgent String?
  referrer  String?
  country   String?
  city      String?
  latitude  Float?
  longitude Float?
}

model IpUsage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ip        String   @unique
  count     Int      @default(0)
  lastReset DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 